name: Build P4Php

env:
  codeline:       "r20.1"
  P4APIDIR:       "/home/runner/work/p4php7/p4api"
  P4PHPDIR:       "/home/runner/work/p4php7/p4php7"
  tag:            "v1.1.${{ github.sha }}"
  docker:         "ppiorunski/p4php7:server2019-vs2017"
  #docker:         "ghcr.io/ppiorunski/server2019-vs2017-p4php"
  phpMount:       "${{ github.workspace }}\\..\\php-src:c:\\dependencies\\php"
  p4apiMount:     "${{ github.workspace }}\\..\\p4api:c:\\dependencies\\p4api"
  p4phpBinMount:  "${{ github.workspace }}\\..\\p4-bin:c:\\p4php-bin"
  phpSdkMount:    "${{ github.workspace }}\\..\\php-sdk-binary-tools:c:\\dependencies\\php-sdk-binary-tools"
  p4phpMount:     "${{ github.workspace }}:c:\\dependencies\\p4php-source"
  password:       ${{ secrets.DOCKERHUB_TOKEN }}


on:
  push:
    branches: [ master ]
    tags:
    - 'v*'
  pull_request:
    branches: [ master ]
  workflow_dispatch:
  release:
    types: [published]

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.tag }}
        release_name: Release v1.1.1
        draft: false
        prerelease: false

    # Jobs run in paraller below is the name-id of job, in this case "build"
  build-linux:
    needs: create_release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ssl: [1.1.1, 1.0.2]
        php: [70, 71, 72, 73, 74]
    steps:
    - name: Checkout source code
      uses: actions/checkout@v2

#    - name: Login to github docker registry
#      run: |
#        echo $env:password| docker login ghcr.io --username $env:username --password-stdin

    - name: Login to docker hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Get p4api for Openssl ${{ matrix.ssl }}
      run: |
        cd .. && wget ftp://ftp.perforce.com/perforce/$codeline/bin.linux26x86_64/p4api-glibc2.3-openssl${{ matrix.ssl }}.tgz
        tar -xvf p4api-glibc2.3-openssl${{ matrix.ssl }}.tgz && rm p4api-glibc2.3-openssl${{ matrix.ssl }}.tgz && mv p4api* p4api && ls -la && cd p4php7 && pwd

    - name: Get p4 and p4d binary
      run: |
        wget ftp://ftp.perforce.com/perforce/$codeline/bin.linux26x86_64/p4 && chmod 775 p4
        wget ftp://ftp.perforce.com/perforce/$codeline/bin.linux26x86_64/p4d && chmod 775 p4d

    - name: Build P4Php ${{ matrix.php }} Openssl ${{ matrix.ssl }}
      run: |
        docker pull ppiorunski/p4php7:php${{ matrix.php }}-ssl${{ matrix.ssl }}
        docker run -v $P4APIDIR:/p4/build/p4api -v $P4PHPDIR:/p4/build/p4-php7 ppiorunski/p4php7:php${{ matrix.php }}-ssl${{ matrix.ssl }}
        mv modules/perforce.so perforce_php${{ matrix.php }}-ssl${{ matrix.ssl }}.so
    - uses: actions/upload-artifact@v2
      with:
        path: perforce_php${{ matrix.php }}-ssl${{ matrix.ssl }}.so

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./perforce_php${{ matrix.php }}-ssl${{ matrix.ssl }}.so
        asset_name: perforce_php${{ matrix.php }}-ssl${{ matrix.ssl }}.so
        asset_content_type: application/zip


  build-windows:
    runs-on: windows-2019
    strategy:
      matrix:
        TS: [TS, NTS]
        phpMinor: [2, 3, 4]
        arch: [x86, x64]
    steps:
    - name: Checkout source code
      uses: actions/checkout@v2
      with:
        path: p4php/

    - name: Login to docker hub
      run: |
        echo $env:password| docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

    - name: Get p4api and p4 binary
      run: |
        cd ..\
        $WebClient = New-Object System.Net.WebClient ; $WebClient.DownloadFile("ftp://ftp.perforce.com/perforce/$env:codeline/bin.nt${{ matrix.arch }}/p4api_vs2017_dyn_openssl1.1.1.zip","${{ github.workspace }}\..\p4api.zip")
        Expand-Archive -Path ${{ github.workspace }}\..\p4api.zip ;  Move-Item -path ${{ github.workspace }}\..\p4api\*\* ${{ github.workspace }}\..\p4api\

        # 2 ways to get the php src - git clone and sync @tag, or download from website.
        #$WebClient = New-Object System.Net.WebClient ; $WebClient.DownloadFile("https://codeload.github.com/php/php-src/zip/php-7.4.10","${{ github.workspace }}\..\php-src.zip")
        #Expand-Archive -Path ${{ github.workspace }}\..\php-src.zip ;  Move-Item -path ${{ github.workspace }}\..\php-src\*\* ${{ github.workspace }}\..\php-src\

        cd ${{ github.workspace }}\.. ; git clone https://github.com/php/php-src.git ; cd php-src ; git checkout tags/php-7.${{ matrix.phpMinor }}.10
        $WebClient = New-Object System.Net.WebClient ; $WebClient.DownloadFile("ftp://ftp.perforce.com/perforce/$env:codeline/bin.nt${{ matrix.arch }}/p4.exe","${{ github.workspace }}\..\php-src\p4.exe")
        $WebClient = New-Object System.Net.WebClient ; $WebClient.DownloadFile("ftp://ftp.perforce.com/perforce/$env:codeline/bin.nt${{ matrix.arch }}/p4d.exe","${{ github.workspace }}\..\php-src\p4d.exe")

        cd ${{ github.workspace }}\.. ; git clone  https://github.com/microsoft/php-sdk-binary-tools.git ; cd php-sdk-binary-tools ;git checkout tags/php-sdk-2.2.0
        cd ${{ github.workspace }}\..

        mkdir ${{ github.workspace }}\..\p4-bin
        dir  ${{ github.workspace }}\..
        dir  ${{ github.workspace }}\..\..
        # note to self when dir is changed it stays that way between commands
        dir
        dir p4-bin
        dir p4api
        dir p4-bin
        dir p4php7
        dir p4php7/p4php
        dir  php-sdk-binary-tools
        dir php-src


    - name: Get docker image
      run: docker pull $Env:docker
    - name: Build P4Php 7.2 Openssl 1.1.1
      run: |
        docker run `
        -v $Env:phpMount `
        -v $Env:p4phpMount `
        -v $Env:p4apiMount `
        -v $Env:p4phpBinMount `
        -v $Env:phpSdkMount `
        --env PHP_MINOR_VER=${{ matrix.phpMinor }} --env arch=${{ matrix.arch }} --env TS=${{ matrix.TS }} `
        $Env:docker
        dir ${{ github.workspace }}\..\p4-bin
        move ${{ github.workspace }}\..\p4-bin\perforce_php7${{ matrix.phpMinor }}${{ matrix.TS }}.dll ${{ github.workspace }}\perforce_php7${{ matrix.phpMinor }}_${{ matrix.arch }}_${{ matrix.TS }}.dll


    - uses: actions/upload-artifact@v2
      with:
        path: ${{ github.workspace }}\perforce_php7${{ matrix.phpMinor }}_${{ matrix.arch }}_${{ matrix.TS }}.dll

  upload-windows:
    needs: [ create_release, build-windows ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        TS: [TS, NTS]
        phpMinor: [2, 3, 4]
        arch: [x86, x64]
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: artifact.zip

    run: unzip artifact.zip
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: perforce_php7${{ matrix.phpMinor }}_${{ matrix.arch }}_${{ matrix.TS }}.dll
        asset_name: perforce_php7${{ matrix.phpMinor }}_${{ matrix.arch }}_${{ matrix.TS }}.dll
        asset_content_type: application/zip
